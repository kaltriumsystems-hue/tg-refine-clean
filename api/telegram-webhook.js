// /api/telegram-webhook.js
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(200).json({ ok: true, hint: 'POST only' });
  }

  const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  if (!TG_TOKEN) return res.status(500).json({ ok: false, error: 'Missing TELEGRAM_BOT_TOKEN' });
  const TG_API = `https://api.telegram.org/bot${TG_TOKEN}`;

  const update = req.body || {};
  const chatId =
    update?.message?.chat?.id ??
    update?.edited_message?.chat?.id ??
    update?.callback_query?.message?.chat?.id;

  async function tgSendMessage(text) {
    try {
      await fetch(`${TG_API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: chatId, text }),
      });
    } catch (_) {}
  }

  // –ù–µ—Ç chatId ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–µ–±—Ö—É–∫
  if (!chatId) return res.status(200).json({ ok: true, note: 'no chat id in update' });

  try {
    // 1) –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
    const text = update?.message?.text ?? update?.edited_message?.text;
    if (typeof text === 'string' && text.trim()) {
      await tgSendMessage(`‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏: ¬´${text.slice(0, 80)}¬ª`);
      return res.status(200).json({ ok: true, kind: 'text' });
    }

    // 2) PDF ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä—å –∏ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç (–±–µ–∑ pdfjs-dist)
    const doc = update?.message?.document;
    const isPDF =
      doc &&
      ((doc.mime_type && doc.mime_type.toLowerCase().includes('pdf')) ||
        (doc.file_name && doc.file_name.toLowerCase().endsWith('.pdf')));

    if (isPDF) {
      await tgSendMessage('üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç‚Ä¶');

      // –ø–æ–ª—É—á–∏—Ç—å file_path
      const fileMeta = await fetch(`${TG_API}/getFile`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ file_id: doc.file_id }),
      }).then(r => r.json());

      const filePath = fileMeta?.result?.file_path;
      if (!filePath) {
        await tgSendMessage('‚ùóÔ∏è–û—à–∏–±–∫–∞: Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª file_path.');
        return res.status(200).json({ ok: false, error: 'no file_path' });
      }

      // —Å–∫–∞—á–∞—Ç—å –±–∏–Ω–∞—Ä—å
      const fileUrl = `https://api.telegram.org/file/bot${TG_TOKEN}/${filePath}`;
      const ab = await fetch(fileUrl).then(r => r.arrayBuffer());
      const buffer = Buffer.from(ab);

      // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç pdf-parse (ESM-friendly)
      const pdfModule = await import('pdf-parse');
      const pdfParse = pdfModule.default || pdfModule;

      let extracted = '';
      try {
        const parsed = await pdfParse(buffer);
        extracted = String(parsed?.text || '').replace(/\u0000/g, '').trim();
      } catch (e) {
        await tgSendMessage(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: ${e.message || e}`);
        return res.status(200).json({ ok: false, error: 'pdf-parse failed' });
      }

      if (!extracted) {
        await tgSendMessage('‚ö†Ô∏è –í PDF –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑–≤–ª–µ–∫–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–Ω).');
        return res.status(200).json({ ok: true, kind: 'pdf-empty' });
      }

      const words = (extracted.match(/\S+/g) || []).length;
      await tgSendMessage(`‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω. –°–ª–æ–≤: ~${words}. (Smoke-test –ø—Ä–æ–π–¥–µ–Ω)`);
      return res.status(200).json({ ok: true, kind: 'pdf', words });
    }

    // –ò–Ω–æ–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ smoke-—Ç–µ—Å—Ç–µ
    await tgSendMessage('‚ÑπÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ PDF-—Ñ–∞–π–ª.');
    return res.status(200).json({ ok: true, kind: 'other' });
  } catch (e) {
    await tgSendMessage(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: ${e.message || e}`);
    return res.status(200).json({ ok: false, error: String(e) });
  }
}
